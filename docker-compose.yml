version: "3.9"

services:
  traefik:
    image: traefik:v2.0
    restart: always
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - --api.insecure=false
      - --api.dashboard=false
      - --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/dynamic.yml
      - --providers.docker.network=proxy
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dynamic.yml:/dynamic.yml
    networks:
      - proxy

  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_HOST}`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.routers.web-secure.entrypoints=websecure"
      - "traefik.http.services.web.loadbalancer.server.port=8000"
    networks:
      - proxy
      - backend

  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      backend:
        aliases:
          - kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "/kafka-health-check.sh"]
      interval: 30s
      timeout: 20s
      retries: 3

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend

  kafka-tools:
    image: bitnami/kafka:latest
    networks:
      - backend
    entrypoint: ["tail", "-f", "/dev/null"]

  bdd-tests:
    build:
      context: ./bdd-tests
      dockerfile: Dockerfile.bdd
    command: npm run test
    volumes:
      - ./bdd-tests:/bdd-tests
    networks:
      - backend

  satellite-producer:
    build:
      context: ./satellite-producer
    depends_on:
      - kafka
    networks:
      - backend

  websocket-server:
    build:
      context: ./websocket-server
    depends_on:
      - kafka
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`websocket.stevenmcsorley.co.uk`)"
      - "traefik.http.routers.websocket.entrypoints=web"
      - "traefik.http.routers.websocket-secure.entrypoints=websecure"
      - "traefik.http.routers.websocket-secure.tls=true"
      - "traefik.http.services.websocket.loadbalancer.server.port=8080"
    ports:
      - "8080:8080"
    networks:
      - backend
      - backend

networks:
  proxy:
    external: true
  backend:
    external: true
